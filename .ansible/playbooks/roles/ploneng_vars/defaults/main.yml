---
cops_plone_name: ploneinstance
cops_plone_project_module_name: "{{cops_plone_name}}"
cops_plone_project_dir: "./src/{{cops_plone_project_module_name.replace('.', '/')}}"
cops_plone_front_dir: "{{cops_plone_project_dir}}"
# builtin in the image
# cops_plone_py_ver: "3.7"
#
cops_plone_default_deploy_env: "dev"
cops_plone_default_docker_tag: "latest"
cops_plone_default_gitref: "master"
cops_plone_branch_envs: {}
cops_plone_deploy_env: "{{ (
  cops_plone_gitref in [cops_plone_default_gitref, cops_plone_default_docker_tag]
    and cops_plone_default_deploy_env
    or  cops_plone_branch_envs.get(cops_plone_gitref, cops_plone_gitref))}}"
cops_plone_docker_tag: "{{cops_plone_gitref.replace('master', cops_plone_default_docker_tag)}}"
cops_plone_docker_image_tag: "{{cops_plone_name}}"
cops_plone_tld_domain: example.com
cops_plone_mail_domain: "{{ cops_plone_tld_domain }}"
cops_plone_gitref: "{{cops_plone_default_gitref}}"
cops_plone_dir_default: "/srv/docker/{{cops_plone_name}}"
cops_plone_dir: "{{cops_plone_dir_default}}"
cops_plone_hostname: "{{cops_plone_deploy_env}}-{{cops_plone_name}}.{{cops_plone_tld_domain}}"
cops_plone_alternate_hostnames: [".{{cops_plone_tld_domain}}"]
cops_plone_gateway: "{{ ansible_default_ipv4.address}}"
cops_plone_devmode: "{{ansible_connection|default('ssh') in ['local']}}"
cops_plone_composename: "{{forced_cops_plone_composename|default(cops_plone_devmode and
  (teleport_wd|copsf_basename) or
  cops_plone_name)}}"
cops_plone_servicename: "{{cops_plone_composename}}"
cops_plone_backuped_dbs_keep_lasts: "1"
cops_plone_backuped_dbs: all
# docker compose settings (may include ip ip:port)
cops_plone_http_port: 80
cops_plone_https_port: 443
cops_plone_api_port: 8000
cops_plone_api_listen: 127.0.0.1
cops_plone_http_listen: 0.0.0.0
#
cops_plone_db_mode: "zeo"
cops_plone_db_host: "db"
cops_plone_db_port: "8100"
cops_plone_db_user: "secretJFCxwPHz99R9jIi"
cops_plone_db_password: "secret4gzQNe3c8851VOJ"
cops_plone_db_name: "{{cops_plone_name}}"
cops_plone_build_args: "--no-cache plone cron"
# backup could be remove in a-while when we have redeployed it everywhere
cops_plone_started_services_default: "log"
# do not remove setup-* services for retrocompat !
cops_plone_restarted_services_default: "log db redis memcached setup-mysql setup-postgres setup-db plone nginx backup cron"
cops_plone_started_services: "{{cops_plone_started_services_default}}"
cops_plone_restarted_services: "{{cops_plone_restarted_services_default}}"
cops_plone_purge_volumes: [statics]
cops_plone_medias_owner: "1000"
cops_plone_medias_group: "1000"
cops_plone_sshargs: >-
  {% set k = hostvars[inventory_hostname].get(
                'ansible_ssh_private_key_file', '') %}
  {% if k%}-o IdentityFile={{k}} -o IdentitiesOnly=yes{%endif%}
  {% if (
      hostvars[inventory_hostname].ansible_connection|default('ssh')
     ) not in [ 'smart', 'local'] %}
  {{ hostvars[inventory_hostname].ssh_args | default('') }}
  {{ hostvars[inventory_hostname].ansible_ssh_args | default('') }}
  {{ hostvars[inventory_hostname].ansible_ssh_common_args | default('') }}
  {{ hostvars[inventory_hostname].ansible_ssh_extra_args | default('') }}
  {% endif %}
  {% if((cops_plone_force_sync_ssh_user) or
        (cops_plone_sync_ssh_user and (cops_plone_force_sync_ssh_user == True))
    )%}
  {% set user = cops_plone_sync_ssh_user or (ansible_user|default('')) or '' %}
  {% if user %}-l {{user}}{% endif %}
  {% endif %}
cops_plone_build: false
cops_plone_pull: true
cops_plone_registries: []
#- {registry: registry.foo.net, username: foo, password: bar}
cops_plone_compose_files_prod: [docker-compose.yml, docker-compose-prod.yml]
cops_plone_compose_files_dev: [docker-compose.yml, docker-compose-dev.yml]
cops_plone_compose_files: "{{(cops_plone_devmode and cops_plone_compose_files_dev or cops_plone_compose_files_prod)}}"
cops_plone_dc:
  docker-compose {% for i in cops_plone_compose_files %} -f {{i}}{% endfor %}
  -p "{{cops_plone_composename}}"
cops_plone_default_from_email: noreply@{{cops_plone_hostname}}
cops_plone_server_email: "{{cops_plone_default_from_email}}"
cops_plone_mailcatcher_user: mailcatcher
cops_plone_mailcatcher_password: mailcatcher
cops_plone_email_server: mailcatcher
cops_plone_email_host_user: ''
cops_plone_email_host_password: ''
cops_plone_email_host_port: 1025
cops_plone_email_use_ssl: ''
cops_plone_email_use_tls: ''
cops_plone_http_protect_user: "root"
cops_plone_http_protect_password: "rootroot"
cops_plone_doc_protect_user: "{{cops_plone_http_protect_user}}"
cops_plone_doc_protect_password: "{{cops_plone_http_protect_password}}"
cops_plone_redis_url: "redis://redis:6379/1"
cops_plone_cors_origin_allow_all: "{{cops_plone_devmode and 'y' or 'n' }}"
cops_plone_hosts_whitelist: "{{ (cops_plone_cors_origin_allow_all=='y' and '*' or (
    [cops_plone_hostname, '0.0.0.0', '.{0}'.format(cops_plone_hostname)]+
    cops_plone_alternate_hostnames
  )|join(',')}}"
cops_plone_hostnames: "{{cops_plone_hosts_whitelist}}"
cops_plone_sentry_tags: ["env:{{cops_plone_deploy_env}}"]
cops_plone_sentry_dsn: ''
cops_plone_docker_env_freeform: |-
  {{ cops_plone_docker_env_defaults}}
  {{ cops_plone_docker_env_extra}}
cops_plone_generic_db_mode: postgres
cops_plone_db_mode: "{{cops_plone_generic_db_mode}}"
# one of ftp|ssh
cops_plone_ftp_mode: ftp
cops_plone_docker_env_defaults: ""
cops_plone_redirect_server_aliases: "off"
cops_plone_zeo_address: "{{cops_plone_db_host}}:{{cops_plone_db_port}}"
# free form for params inside dockerenv
cops_plone_dotenv_defaults: |-
  # cors
  CORS_ALLOW_ORIGIN={{cops_plone_hosts_whitelist}}
  PLONE__COPS_ALL_HOSTNAMES={{cops_plone_hostnames}}
  NGINX_SERVERNAME={{cops_plone_hostname}}
  NGINX_SERVER_ALIASES={{cops_plone_alternate_hostnames|join(' ')}}
  NGINX_REDIRECT_SERVER_ALIASES={{cops_plone_redirect_server_aliases}}
  {% if cops_plone_devmode %}
  PLONE__DEBUG=y
  {% endif %}
  PLONE__DEFAULT_FROM_EMAIL={{ cops_plone_default_from_email }}
  PLONE__SERVER_EMAIL={{ cops_plone_server_email }}
  PLONE__EMAIL_HOST={{cops_plone_email_server}}
  {% if "{0}".format(cops_plone_email_use_tls).lower() in ['yes', 'no'] %}
  PLONE__EMAIL_USE_TLS={{cops_plone_email_use_tls}}
  {% elif "{0}".format(cops_plone_email_use_ssl).lower() in ['yes', 'no'] %}
  PLONE__EMAIL_USE_SSL={{cops_plone_email_use_ssl}}
  {% endif %}
  PLONE__EMAIL_PORT={{cops_plone_email_host_port}}
  PLONE__EMAIL_HOST_USER={{cops_plone_email_host_user}}
  {% if cops_plone_email_host_password %}
  PLONE__EMAIL_HOST_PASSWORD={{cops_plone_email_host_password}}
  {% endif %}
  PLONE__REDIS_URL={{cops_plone_redis_url}}
  PLONE__DEPLOY_ENV={{cops_plone_deploy_env}}
  PLONE__HTTP_PROTECT_USER={{cops_plone_http_protect_user}}
  PLONE__HTTP_PROTECT_PASSWORD={{cops_plone_http_protect_password}}
  {% if cops_plone_sentry_dsn %}
  PLONE__SENTRY_DSN={{cops_plone_sentry_dsn}}
  PLONE__SENTRY_RELEASE={{cops_plone_docker_tag}}
  PLONE__SENTRY_TAGS={{cops_plone_sentry_tags|join(',')}}
  {% endif %}
  # gunicorn
  # This need to be changed in production
  MAILCATCHER_USER={{cops_plone_mailcatcher_user}}
  MAILCATCHER_PASSWORD={{cops_plone_mailcatcher_password}}
  REDIS_URL={{cops_plone_redis_url}}
  # db
  DBS_DBNAMES={{cops_plone_backuped_dbs}}
  DBS_KEEP_LASTS={{cops_plone_backuped_dbs_keep_lasts}}
  {% if 'post in db_mode'%}
  POSTGRES_HOST={{ cops_plone_db_host }}
  POSTGRES_PORT={{ cops_plone_db_port }}
  POSTGRES_USER={{ cops_plone_db_user }}
  POSTGRES_DB={{ cops_plone_db_name }}
  POSTGRES_PASSWORD={{cops_plone_db_password }}
  PGPASSWD={{cops_plone_db_password }}
  PGPASSWORD={{cops_plone_db_password }}
  {% elif 'zeo' in db_mode %}
  ZEO_ADDRESS={{cops_plone_zeo_address}}
  {% endif %}
  PLONE__HTTP_LISTEN={{cops_plone_http_listen}}
  PLONE__API_LISTEN={{cops_plone_api_listen}}
  PLONE__HTTP_PORT={{cops_plone_http_port}}
  PLONE__HTTPS_PORT={{cops_plone_https_port}}
  PLONE__API_PORT={{cops_plone_api_port}}
  APP_TYPE=plone
  # builtin in the image
  # PLONE_PY_VER={{ cops_plone_py_ver }}
  PLONE_NAME={{ cops_plone_name }}
  COMPOSE_PROJECT_NAME={{cops_plone_composename}}
  CI_COMMIT_SHA={{cops_plone_gitref}}
  PLONE_IMAGE={{ cops_plone_docker_image }}
  PLONE_IMAGE_VERSION={{cops_plone_docker_tag}}
  CONTROL_COMPOSE_FILES={{cops_plone_compose_files|join(' ')}}
  COMPOSE_FILE={{cops_plone_compose_files|join(':')}}
  PLONE__DOC_PROTECT_USER={{cops_plone_doc_protect_user}}
  PLONE__DOC_PROTECT_PASSWORD={{cops_plone_doc_protect_password}}
cops_plone_dotenv_extra: ""
cops_plone_dotenv: |
  {{cops_plone_dotenv_defaults}}
  {{cops_plone_dotenv_extra}}
# free form for params inside dockerenv
cops_plone_docker_env_extra: ""
# free form for params inside local.py
cops_plone_localpy_extra: ""
# Normally playbook is in ./.ansible/playbooks
cops_plone_code_dir: "{{playbook_dir}}/../.."
cops_plone_has_bastion: "{{(ansible_bastion|default(''))|copsf_asbool}}"
cops_plone_rsync_password: "{{ansible_become_pass|default('')}}"
cops_plone_rsync_user: "{{ansible_user|default('root')}}"
cops_plone_rsync_escalate: "{{cops_plone_rsync_user != 'root'}}"
cops_plone_rsync_path: "{% if cops_plone_rsync_escalate %}sudo {%if cops_plone_rsync_password%}-S {%endif%}{%endif %}rsync"
cops_plone_rsync_env: {PASSWORD: "{{cops_plone_rsync_password}}"}
cops_plone_rsync_rsh_wrapper_path: "{{playbook_dir|copsf_dirname}}/ssh_sudo"
cops_plone_rsync_rsh_wrapper: |-
  #!/bin/bash
  # Wrapper to escalate remote shell as root for rsync syncronisation
  { if [ "x${PASSWORD-}" != "x" ];then echo "${PASSWORD-}";fi;cat -; }| ssh "$@" &
cops_plone_rsync_rsh: "{% if cops_plone_rsync_password and cops_plone_rsync_escalate%}{{cops_plone_rsync_rsh_wrapper_path}}{%else%}ssh{%endif%}"
cops_plone_rsync_set_remote_user: "{{ cops_plone_has_bastion and 'yes' or 'no'}}"
cops_plone_rsync_compress: false
cops_plone_rsync_opts: |-
  {#- put $ssh_args here as when we use a custom rsh for interactive
  sudopass, they would get ignored by the syncronise module #}
  {%- set o = ['--rsh={0} {1}'.format(cops_plone_rsync_rsh, cops_plone_sshargs)|quote] %}
  {{-o|to_json|string}}
cops_plone_rsync_code_opts:  "{{cops_plone_rsync_opts+cops_plone_rsync_code_default_opts}}"
cops_plone_rsync_theme_opts: "{{cops_plone_rsync_opts+cops_plone_rsync_theme_default_opts}}"
cops_plone_rsync_theme_default_opts: ["-azv", "--delete"]
cops_plone_rsync_code_default_opts: [
    "-azv",
    # include deploy projects base code
    "--include", "local/*-deploy",
    "--exclude", "local/*",
    #
    "--exclude", ".ansible",
    "--exclude", ".tox",
    "--exclude", ".env",
    "--exclude", ".vscode",
    "--exclude", "docker.env"]
cops_plone_backup_postgresql: "{{'5432' == '{0}'.format(cops_plone_db_port)}}"
cops_plone_backup_paths_to_backup:
- "{{cops_plone_dir}}"
cops_plone_backup_docker_volumes_include_media: [mediafiles]
cops_plone_backup_docker_volumes_none: []
cops_plone_backup_docker_volumes: "{{cops_plone_backup_docker_volumes_none}}"
cops_plone_backup_docker_volumes_: |-
  {% set res = [] %}
  {% for i in cops_plone_backup_docker_volumes %}
  {% set  _ = res.append('_'.join([cops_plone_composename, i])) %}
  {% endfor %}
  {{ res | to_json }}
cops_plone_backup_pgdump_urls:
- name: "{{cops_plone_db_name}}"
  url: "postgres://{{
      cops_plone_db_user}}:{{cops_plone_db_password}}@{{
        cops_plone_db_host}}:{{cops_plone_db_port}}/{{
          cops_plone_db_name}}"
  docker_dir: "{{cops_plone_dir}}"
  docker_service: backup
  docker_compose: "{{cops_plone_dc}}"
cops_plone_sync_theme_contents_front: |-
  {% set res = {} %}
  {% set _ = res.update({
    "{0}/{1}".format(cops_plone_front_dir, '/static/dist/'): {},
    "{0}/{1}".format(cops_plone_front_dir, '/static/js/'): {},
    "{0}/{1}".format(cops_plone_front_dir, '/static/css/'): {},
    "{0}/{1}".format(cops_plone_front_dir, '/static/styles/'): {},
    "{0}/{1}".format(cops_plone_front_dir, '/static/scripts/'): {},
  }) %}
  {{ res | to_json }}
cops_plone_sync_theme_contents_webpack: |-
  {% set res = {} %}
  {% set _ = res.update({
    "{0}/{1}".format(cops_plone_front_dir, '/webpack-stats.json'): {},
    'webpack-stats.json': {},
  }) %}
  {% set _ = res.update(cops_plone_sync_theme_contents_front) %}
  {{ res | to_json }}
cops_plone_sync_theme_contents: {}
cops_plone_drun_extra_args: "--entrypoint /init.sh"
cops_plone_drun:
  COMPOSE_INTERACTIVE_NO_CLI= {{teleport_dc}}
  run -e SHELL_USER=plone --no-deps
  --rm {{cops_plone_drun_extra_args}} {{teleport_app_container}}
#
# teleport vars (duplicate environment to another)
#
teleport_sshcmd: ssh
teleport_rsynccmd: rsync
teleport_mode: default
# handle retrocompatibility within teleport modes
teleport_modes_mapper: {standard: default}
_teleport_mode: "{{teleport_modes_mapper.get(teleport_mode, teleport_mode)}}"
teleport_reset_perms: true
teleport_db_mode: "{{cops_plone_generic_db_mode}}"
teleport_ms_project: "{{cops_plone_name}}"
teleport_services: [cron, "{{teleport_app_container}}", nginx]
teleport_stop_services: "{{teleport_services}}"
teleport_restart_services: "{{teleport_services}}"
# teleport_mode: default|makinastates
# teleport_origin: <origin from where we restore>
# teleport_destination: <destination to restore>
teleport_force_wd: "{{cops_plone_dir}}"
teleport_wd: "{{(
  cops_plone_devmode and
  (playbook_dir|copsf_dirname|copsf_dirname) or
  teleport_force_wd)}}"
teleport_orig_wd: "{{teleport_force_orig_wd|default(teleport_force_wd)}}"
teleport_orig_composename: "{{cops_plone_name}}"
teleport_data_dir: "{{teleport_wd}}/local/nobackup/teleport"
teleport_orig_data_dir: "{{teleport_orig_wd}}/local/nobackup/teleport"
teleport_paths_dest_dump_mysql: "/var/lib/mysql/dbdumps"
teleport_paths_dest_dump_postgres: "/var/lib/postgresql/data/dbdumps"
teleport_paths_origin_dump: "{{teleport_orig_data_dir}}/dumps"
teleport_paths_dump: "{{teleport_wd}}/dumps"
teleport_paths_ms_origin_dump: "/srv/projects/{{teleport_ms_project}}/data/nobackup/teleport/dumps"
teleport_ms_medias_dir: "/srv/projects/{{teleport_ms_project}}/data/media"
teleport_db_container: db
teleport_docker_medias_dir: "/var/lib/docker/volumes/{{teleport_orig_composename}}_mediafiles/_data"
teleport_container_medias_dir: /app/public/media
teleport_app_container: plone
teleport_paths_makinastates:
  origin_dump: "{{teleport_paths_ms_origin_dump}}"
  origin_medias: "{{teleport_ms_medias_dir}}"
teleport_paths_default:
  origin_dump: "{{teleport_paths_origin_dump}}"
  origin_medias: "{{teleport_docker_medias_dir}}"
teleport_paths_common:
  dest_dump: "{{lookup('vars', 'teleport_paths_dest_dump_'+teleport_db_mode)}}"
  dest_medias: "{{teleport_container_medias_dir}}"
  dump_file: dump.gz
teleport_paths: "{{teleport_paths_common|combine(lookup('vars', 'teleport_paths_'+_teleport_mode))}}"
teleport_paths_origin_dump_file: "{{teleport_paths.origin_dump}}/{{teleport_paths.dump_file}}"
teleport_paths_dest_dump_file: "{{teleport_paths.dest_dump}}/{{teleport_paths.dump_file}}"
teleport_rsync_args: "-az{{teleport_verbose}} --delete --delete-after"
teleport_rsync_extra_args: "{{teleport_rsync_origin_extra_args}}"
teleport_rsync_origin_extra_args: "{% if teleport_origin_vars.get('ansible_become', '')           and (teleport_origin_vars.get('ansible_user', '')      not in [None, '', 'root'])%}--rsync-path='sudo rsync'{%endif%}"
teleport_rsync_destination_extra_args: "{% if teleport_destination_vars.get('ansible_become', '') and (teleport_destination_vars.get('ansible_user', '') not in [None, '', 'root'])%}--rsync-path='sudo rsync'{%endif%}"
teleport_destination_ansible_host: "{{groups[teleport_destination][0]}}"
teleport_origin_ansible_host: "{{groups[teleport_origin][0]}}"
teleport_destination_host: "{{hostvars[teleport_destination_ansible_host]['ansible_host'] or teleport_destination_ansible_host}}"
teleport_origin_host: "{{hostvars[teleport_origin_ansible_host].get('ansible_host', teleport_origin_ansible_host)}}"
teleport_dc: "{{cops_plone_dc}}"
teleport_owner: "{{cops_plone_medias_owner}}"
teleport_group: "{{cops_plone_medias_group}}"
teleport_use_host: "{{ansible_distribution != 'MacOSX'}}"
teleport_sync_db_files_default:
  dump:
    origin_path: "{{teleport_paths.origin_dump}}/"
    container: "{{teleport_db_container}}"
    container_path: "{{teleport_paths.dest_dump}}/"
    # only_if_exists: true
teleport_sync_files_default:
  medias:
    origin_path: "{{teleport_paths.origin_medias}}/"
    container: "{{teleport_app_container}}"
    container_path: "{{teleport_paths.dest_medias}}/"
    # only_if_exists: true
teleport_sync_db_files: "{{teleport_sync_db_files_default}}"
teleport_sync_files: "{{teleport_sync_files_default}}"
teleport_ssh_key_path: "{{teleport_wd}}/local/.ssh/deploy"
teleport_ssh_origin_key_path: "{{(
  teleport_ssh_key_path or
    hostvars[groups[teleport_origin][0]].get('ansible_ssh_private_key_file', ''))}}"
teleport_ssh_destination_key_path: "{{(
  teleport_ssh_key_path or
    hostvars[groups[teleport_destination][0]].get(
      'ansible_ssh_private_key_file', ''))}}"
teleport_sshkey_stripper: "-i [^ ]+"
teleport_origin_sshargs_withoutkey: "{{teleport_origin_sshargs_default|regex_replace( teleport_sshkey_stripper, '')}}"
teleport_destination_sshargs_withoutkey: "{{teleport_destination_sshargs_default|regex_replace( teleport_sshkey_stripper, '')}}"
# as we connect not from bastion, dont use by default the key version one
ansible_ssh_bastion: ""
teleport_sshargs: "{{teleport_origin_sshargs}}"
teleport_origin_vars: "{{hostvars[groups[teleport_origin][0]]}}"
teleport_destination_vars: "{{hostvars[groups[teleport_destination][0]]}}"
teleport_origin_sshargs: "{% if teleport_origin_vars.get('ansible_user', '')%}-l {{teleport_origin_vars.ansible_user}}{%endif%}{{ ((teleport_origin_vars.get(
  'ansible_ssh_bastion', '') |copsf_asbool
) and teleport_origin_sshargs_default or teleport_origin_sshargs_withoutkey).replace('\"', \"'\")}}"
teleport_destination_sshargs: "{% if teleport_destination_vars.get('ansible_user', '')%}-l {{teleport_destination_vars.ansible_user}}{%endif%}{{ ((teleport_destination_vars.get(
  'ansible_ssh_bastion', '') |copsf_asbool
) and teleport_destination_sshargs_default or teleport_destination_sshargs_withoutkey).replace('\"', \"'\")}}"
teleport_origin_dump_scripts_postgres: |-
  {% if not teleport_origin_db_is_docker %}
  cd "{{teleport_paths.origin_dump}}"
  {% if teleport_origin_db_password %}PGPASSWORD="{{teleport_origin_db_password}}"{% endif %} \
  pg_dump \
    --host="{{teleport_origin_db_host}}" \
    --port="{{teleport_origin_db_port}}" \
    --username="{{teleport_origin_db_user}}" \
    --dbname="{{teleport_origin_db_name}}" \
    -Fc > {{teleport_paths.origin_dump}}/dump
  {% else %}
  cd "{{teleport_wd}}"
  {{teleport_dc}} exec -T {{teleport_db_container}} pg_dump \
    --username="{{teleport_origin_db_user}}" \
    --dbname="{{teleport_origin_db_name}}" \
    -Fc > {{teleport_paths.origin_dump}}/dump
  {% endif %}
teleport_origin_dump_script_compress: |-
  gzip -c {{teleport_paths.origin_dump}}/dump \
  > "{{teleport_paths_origin_dump_file}}"
  rm -fv {{teleport_paths.origin_dump}}/dump
teleport_origin_dump_script: |-
  set -ex
  {{lookup('vars', 'teleport_origin_dump_scripts_'+teleport_db_mode)}}
  {{teleport_origin_dump_script_compress}}
teleport_origin_db_host: "{{cops_plone_db_host}}"
teleport_origin_db_port: "{{cops_plone_db_password}}"
teleport_origin_db_user: "{{cops_plone_db_user}}"
teleport_origin_db_password: "{{cops_plone_db_password}}"
teleport_origin_db_name: "{{cops_plone_db_name}}"
## standard is for retrocompat
teleport_origin_db_is_docker: "{{_teleport_mode in ['default', 'standard']}}"
teleport_origin_db_dockername: "{{cops_plone_name}}_db_1"
teleport_db_encoding: 'UTF-8'
teleport_pg_restore_drop_db: true
cops_plone_force_sync_ssh_user: null
cops_plone_sync_ssh_user: ""
ansible_bastion: ""
cops_plone_sync_ssh_user_internal: "{% if((cops_plone_force_sync_ssh_user) or
        (cops_plone_sync_ssh_user and (cops_plone_force_sync_ssh_user == True))
    )%}{{ cops_plone_sync_ssh_user or (ansible_user|default('')) or '' }}{% endif %}"
teleport_env_ssh_deploy_key: "{{cops_plone_dir_default}}/local/.ssh/deploy"
teleport_bastion_ssh_deploy_key: "{{teleport_env_ssh_deploy_key}}"
teleport_origin_viabastion_sshargs: "{% set d = hostvars[groups[teleport_origin][0]] %}{%if ansible_bastion%}-o ProxyCommand=\"ssh {% if teleport_bastion_ssh_deploy_key %}-i {{teleport_bastion_ssh_deploy_key}} {%endif%}-o IdentitiesOnly=yes -q -W {{d.ansible_host}}:{{d.ansible_port|default('22')}} {{ansible_bastion}} {%if ansible_bastion_user%}-l {{ansible_bastion_user}}{%endif%} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no\" {%endif%}"
teleport_destination_viabastion_sshargs: "{% set d = hostvars[groups[teleport_destination][0]] %}{%if ansible_bastion%}-o ProxyCommand=\"ssh {% if teleport_bastion_ssh_deploy_key %}-i {{teleport_bastion_ssh_deploy_key}} {%endif%}-o IdentitiesOnly=yes -q -W {{d.ansible_host}}:{{d.ansible_port|default('22')}} {{ansible_bastion}} {%if ansible_bastion_user%}-l {{ansible_bastion_user}}{%endif%} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no\" {%endif%}"
teleport_ssh_origin_args: "{{hostvars[groups[teleport_origin][0]].ansible_ssh_common_args | default('')}}"
teleport_ssh_destination_args: "{{hostvars[groups[teleport_destination][0]].ansible_ssh_common_args | default('')}}"
teleport_origin_sshargs_default: >-
  {% set h = groups[teleport_origin][0] %}
  {% set k = teleport_destination not in ['controller'] and teleport_env_ssh_deploy_key or teleport_ssh_origin_key_path %}
  {% if k%}-o IdentityFile={{k}} -o IdentitiesOnly=yes{%endif%}
  -o StrictHostKeyChecking=no
  {% if (
      hostvars[h].ansible_connection|default('ssh')
     ) not in [ 'smart', 'local'] %}
  {{ hostvars[h].ssh_args | default('') }}
  {{ hostvars[h].ansible_ssh_args | default('') }}
  {{ ansible_bastion and teleport_origin_viabastion_sshargs or teleport_ssh_origin_args }}
  {{ hostvars[h].ansible_ssh_extra_args | default('') }}
  {% endif %}
  {% set user = cops_plone_sync_origin_ssh_user|default(cops_plone_sync_ssh_user) or (ansible_user|default('')) or '' %}
  {% if cops_plone_sync_ssh_user_internal %}-l {{user}}{% endif %}
teleport_destination_sshargs_default: >-
  {% set h = groups[teleport_destination][0] %}
  {% set k = teleport_origin not in ['controller'] and teleport_env_ssh_deploy_key or teleport_ssh_destination_key_path %}
  -o StrictHostKeyChecking=no
  {% if k%}-o IdentityFile={{k}} -o IdentitiesOnly=yes{%endif%}
  {% if (
      hostvars[h].ansible_connection|default('ssh')
     ) not in [ 'smart', 'local'] %}
  {{ hostvars[h].ssh_args | default('') }}
  {{ hostvars[h].ansible_ssh_args | default('') }}
  {{ ansible_bastion and teleport_destination_viabastion_sshargs or teleport_ssh_destination_args }}
  {{ hostvars[h].ansible_ssh_extra_args | default('') }}
  {% endif %}
  {% if((cops_plone_force_sync_ssh_user) or
        (cops_plone_sync_ssh_user and (cops_plone_force_sync_ssh_user == True))
    )%}
  {% set user = cops_plone_sync_dest_ssh_user|default(cops_plone_sync_ssh_user) or (ansible_user|default('')) or '' %}
  {% if user %}-l {{user}}{% endif %}
  {% endif %}
teleport_plone_fakeinitial: true
teleport_post_reset_script_default: |-
  set -ex
  {% if teleport_plone_fakeinitial %}
  cd {{teleport_wd}};
  cat|{{cops_plone_drun}} bash -ex - <<EOF
  . /app/venv/bin/activate && \
  python ./manage.py migrate --fake-initial
  EOF
  {%endif%}
  export COMPOSE_INTERACTIVE_NO_CLI=1
teleport_pg_restore_clean: true
teleport_pg_restore_flags: >-
  -U \$POSTGRES_USER -d \$POSTGRES_DB
  --no-owner --no-privileges --no-acl
  {% if teleport_pg_restore_clean%}--clean --if-exists{%endif%}
teleport_pg_restore: |-
  {% if teleport_pg_restore_drop_db%}
  {%endif%}
teleport_reset_db_script_restore_postgres: |-
  set -ex
  cd "{{teleport_wd}}"
  cat|COMPOSE_INTERACTIVE_NO_CLI= {{teleport_dc}} \
  exec -T {{teleport_db_container}} sh -ex - <<EOF
  {{teleport_pg_restore}}
  EOF
teleport_clean_dump: false
teleport_reset_db_script_default: |-
  set -ex
  {{lookup('vars', 'teleport_reset_db_script_restore_'+teleport_db_mode)}}
  {% if teleport_clean_dump %}
  cd "{{teleport_wd}}"
  {{teleport_dc}} \
  exec -T {{teleport_db_container}} rm -f "{{teleport_paths_dest_dump_file}}"
  {% endif %}
teleport_restart_script_default: |-
  set -ex
  cd "{{teleport_wd}}"
  {% for i in teleport_restart_services %}
  {{teleport_dc}} stop {{i}}
  {{teleport_dc}} up -d --force-recreate --no-deps {{i}}
  {% endfor %}
teleport_restart_script: "{{teleport_restart_script_default}}"
teleport_stop_script_default: |-
  set -ex
  cd "{{teleport_wd}}"
  {% for i in teleport_stop_services %}
  {{teleport_dc}} stop {{i}}
  {% endfor %}
teleport_stop_script: "{{teleport_stop_script_default}}"
teleport_reset_db_script: "{{teleport_reset_db_script_default}}"
teleport_post_reset_script: "{{teleport_post_reset_script_default}}"
teleport_post_restart_services: "db"
teleport_post_force_restart_services: "setup-mysql setup-postgres setup-db redis memcached"
teleport_restart_dependant_services: |-
  set -e
  cd "{{teleport_wd}}"
  has_service() { {{teleport_dc}} config |grep -qE "^  +${1}:"; }
  log() { echo "$@" >&2; }
  restarted_services="{{teleport_post_restart_services}}"
  frestarted_services="{{teleport_post_force_restart_services}}"
  restart_service() {
    service="$1"
    shift
    log "restart service: $service"
    if ( has_service $service );then
      {{teleport_dc}} up -d --no-deps ${@} $service
    fi
  }
  for s in $restarted_services;do restart_service $s;done
  for s in $frestarted_services;do restart_service $s --force-recreate;done
teleport_db_restart_script: |-
  set -ex
  cd "{{teleport_wd}}"
  {{teleport_dc}} stop {{teleport_db_container}}
  {{teleport_dc}} up -d --force-recreate --no-deps {{teleport_db_container}}
teleport_deploy_ssh_key_paths: |-
  {%- set ret = cops_deploy_ssh_key_paths|copsf_deepcopy %}
  {%- for r, rdata in ret.items() %}
  {%- set _ = rdata.update(
    {'path': teleport_wd+'/local/.ssh/'+r}) %}
  {%- endfor %}
  {{- ret | to_json }}
teleport_dryrun: false
teleport_debug: false
teleport_is_verbose: "{{teleport_debug}}"
teleport_verbose: "{{teleport_is_verbose and 'v' or ''}}"
teleport_vverbose: "{{teleport_is_verbose  and '-v' or ''}}"
teleport_xverbose: "{{teleport_is_verbose and 'x' or ''}}"
teleport_vxverbose: "{{teleport_is_verbose  and '-x' or ''}}"
cops_plone_maintenance_flags_dir: /app/data/flags

# not used anymore but used in local inventories, do not remove
cops_plone_py_ver: "3.8"
